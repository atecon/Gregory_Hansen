set verbose off
clear

include "./src/gregory_hansen.inp" --force
open "./src/joe96_data.gdt" --quiet


function scalar assert_matrix_equality (matrix actual, matrix expected)
    /* Assert element-wise equality.
    return: int, summed differences; zero value implies "any"-equality  */

    matrix d = abs(vec(actual)) .- abs(vec(expected))

    return d
end function



function void test_get_defaultsGH (void)
    print "Start testing function get_defaultsGH()"

    # Given
    expected_trimming_start = 0.15
    expected_trimming_end = 0.85
    expected_criteria = "aic"
    expected_model = "cs"
    expected_adf_maxlag = 4

    # When
    bundle actual = get_defaultsGH()
    strings keys = getkeys(actual)

    # Then
    loop foreach i keys
        string name = sprintf("expected_%s", "$i")
        assert(actual["$i"] == @name)
    endloop
end function
test_get_defaultsGH()


bundles Params = null
Params = Params + _(model = "c", criteria = "fix", adf_maxlag = 2)
Params = Params + _(model = "c", criteria = "aic", adf_maxlag = 2)
Params = Params + _(model = "c", criteria = "bic", adf_maxlag = 2)
Params = Params + _(model = "c", criteria = "ttest", adf_maxlag = 2)

Params = Params + _(model = "ct", criteria = "fix", adf_maxlag = 2)
Params = Params + _(model = "ct", criteria = "aic", adf_maxlag = 2)
Params = Params + _(model = "ct", criteria = "bic", adf_maxlag = 2)
Params = Params + _(model = "ct", criteria = "ttest", adf_maxlag = 2)

Params = Params + _(model = "cs", criteria = "fix", adf_maxlag = 2)
Params = Params + _(model = "cs", criteria = "aic", adf_maxlag = 2)
Params = Params + _(model = "cs", criteria = "bic", adf_maxlag = 2)
Params = Params + _(model = "cs", criteria = "ttest", adf_maxlag = 2)

list L = dataset

function void test_model_parameters (const bundles P, const list L)
    print "Start testing model parameter space()."

    list X = L.ynr L.sr

    loop foreach i P
        # Given
        bundle params = _(model = P[i].model,\
                          criteria = P[i].criteria,\
                          adf_maxlag = P[i].adf_maxlag)

        # When
        bundle Model = estimateGH(L.md, X, params)
    endloop
end function
test_model_parameters(Params, dataset)


function void test_baseline_estimation (const list L)
    print "Start testing function name()"

    # Given
    smpl 1960:1 1990:4       # Sample selected in the original article
    list X = L.ynr L.sr

    bundle params = _(\
                      model = "cs",\
                      criteria = "aic",\
                      adf_maxlag = 6\
                      )

    # When
    bundle model = estimateGH(L.md, X, params)

    expected_lag_adf = 4
    expected_tstat_adf = -4.77755
    expected_breakpoint_pct_adf = 0.66129
    expected_breakpoint_pct_za = 0.693548
    expected_breakpoint_pct_zt = 0.693548
    expected_tstat_za = -31.5576
    expected_tstat_zt = -4.18042
    expected_critvalues_adf = {-5.97, -5.73, -5.5, -5.23}
    expected_critvalues_zt = {-68.210, -63.280, -58.330, -52.850}

    # Then
    assert(model.lag_adf == expected_lag_adf)
    assert(model.tstat_adf == expected_tstat_adf)
    assert(model.tstat_zt == expected_tstat_zt)
    assert(model.tstat_za == expected_tstat_za)
    assert(model.breakpoint_pct_adf == expected_breakpoint_pct_adf)
    assert(model.breakpoint_pct_za == expected_breakpoint_pct_za)
    assert(model.breakpoint_pct_zt == expected_breakpoint_pct_zt)

    assert( assert_matrix_equality(model.critvalues_adf, expected_critvalues_adf) == 0)
    assert( assert_matrix_equality(model.critvalues_zt, expected_critvalues_zt) == 0)
end function
test_baseline_estimation(dataset)



function void test_estimation_single_series (const list L)
    print "Start testing function name()"

    # Given
    smpl 1960:1 1990:4       # Sample selected in the original article
    list X = L.ynr

    bundle params = _(\
                      model = "cs",\
                      criteria = "aic",\
                      adf_maxlag = 3\
                      )

    # When
    bundle model = estimateGH(L.md, X, params)

    # Then
    assert(model.nX == nelem(X))
    assert(model.adf_maxlag == params.adf_maxlag)
end function
test_estimation_single_series(dataset)



function void test_initialization (void)
    print "Start testing function initialization()"

    # Given
    matrix y = seq(1, 3)'
    matrix x = mshape(0, 3, 4)
    bundle actual = _(trimming_start = 0.15,\
                      trimming_end = 0.85)


    # When
    initialization(y, x, &actual)
    scalar expected_T = rows(y)
    scalar expected_n_vars = cols(x)

    # Then
    assert(actual.T == expected_T)
    assert(actual.nX == expected_n_vars)
end function
test_initialization()



printf "\nInfo: All tests passed.\n"
quit
