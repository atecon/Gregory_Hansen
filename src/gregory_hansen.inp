function bundle adftest (const matrix x,
                         const bundle self)
    /* Compute ADF type of test. */

    bundle B

    scalar n = self.T
    scalar ic = 0
    scalar adf_maxlag = self.adf_maxlag

    matrix stats_adf = zeros((self.adf_maxlag + 1), 1)
    matrix lags_adf = zeros((self.adf_maxlag + 1), 1)

    bundle Model = run_ols(self.y, x)
    matrix e = Model.e
    matrix de = diff(e)

    loop while adf_maxlag >= 0 -q

        scalar start = 1 + adf_maxlag
        scalar ende = n - 1

        yde = de[start:ende]
        xe = e[start:ende]
        n1 = rows(yde)

        scalar j = 1
        loop while j <= adf_maxlag -q
            xe = xe ~ de[start-j:ende-j]
            j++
        endloop

        bundle Model = run_ols(yde, xe)
        matrix bhat = Model.bhat
        matrix uhat = Model.e
        matrix se = Model.se

        if self.criteria == 1  # K is pre-specified
            stats_adf[start] = -1000   # set a random negative constant #
            lags_adf[start] = bhat[1] / se[1]
            break

        elif self.criteria == 2  # K is determined by AIC #
            ic = ln(uhat'uhat / n1) + 2 * (adf_maxlag + 2) / n1

        elif self.criteria == 3  # K is determined by BIC #
            ic = ln(uhat'uhat / n1) + (adf_maxlag + 2) * ln(n1) / n1

        elif self.criteria == 4 # K is determined by downward t #
            if abs(bhat[start] / se[start]) >= 1.96 || adf_maxlag == 0
                stats_adf[start] = -1000    # set a random negative constant
                lags_adf[start] = bhat[1] / se[1]
                break
            endif
        endif

        stats_adf[start] = ic
        lags_adf[start] = bhat[1] / se[1]
        adf_maxlag--
    endloop

    matrix lag = iminc(stats_adf)
    matrix tstat = lags_adf[lag]

    B = _(tstat, optimal_lag = (lag-1))

    return B
end function


function matrix critza (const int m[1::] "number of regressors",
                        const int model[1::] "1:C, 2:C/T, 3:C/S")
    /* Critical values for ZA test. */

    matrix RET = {}

    # TODO: What about model == 1?

    if model == 2
        matrix CRIT_C = { -50.07 , -45.01 , -40.48 , -36.19 ; -57.01 , -51.41 , -46.98 , -42.49 ; -63.64 , -57.96 , -53.58 , -48.65 ; -70.18 , -64.41 , -59.40 , -54.38 }
        matrix RET = CRIT_C[m,]
    elif model == 3
        matrix CRIT_CT = { -57.28 , -52.09 , -47.96 , -43.22 ; -64.77 , -58.57 , -53.92 , -48.94 ; -70.27 , -64.26 , -59.76 , -54.94 ; -76.95 , -70.45 , -65.44 , -60.12 }
        matrix RET = CRIT_CT[m,]
    elif model == 4
        matrix CRIT_CS = { -57.17 , -51.32 , -47.04 , -41.85 ; -68.21 , -63.28 , -58.33 , -52.85 ; -80.15 , -73.91 , -68.94 , -63.42 ; -90.35 , -84.00 , -78.52 , -72.56 }
        matrix RET = CRIT_CS[m,]
    endif

    cnameset(RET, "CV1 CV25 CV5 CV10")

    return RET
end function


function matrix critadfzt (const int m[1::] "number of regressors",
                           const int model[1::] "2:C, 3:C/T, 4:C/S")
    /* Critical values for ADF-ZT test. */

    matrix RET = {}

    # TODO: What about model == 1?

    if model == 2
        matrix CRIT_C = { -5.13 , -4.83 , -4.61 , -4.34 ; -5.44 , -5.16 , -4.92 , -4.69 ; -5.77 , -5.50 , -5.28 , -5.02 ; -6.05 , -5.80 , -5.56 , -5.31 }
        matrix RET = CRIT_C[m,]
    elif model == 3
        matrix CRIT_CT = { -5.45 , -5.21 , -4.99 , -4.72 ; -5.80 , -5.51 , -5.29 , -5.03 ; -6.05 , -5.79 , -5.57 , -5.33 ; -6.36 , -6.07 , -5.83 , -5.59 }
        matrix RET = CRIT_CT[m,]
    elif model == 4
        matrix CRIT_CS = { -5.47 , -5.19 , -4.95 , -4.68 ; -5.97 , -5.73 , -5.50 , -5.23 ; -6.51 , -6.23 , -6.00 , -5.75 ; -6.92 , -6.64 , -6.41 , -6.17 }
        RET = CRIT_CS[m,]
    endif
    cnameset(RET, "CV1 CV25 CV5 CV10")

    return RET
end function


function bundle run_ols (const matrix y,
                         const matrix x)
    /* OLS estimation. */

    bundle B
    matrix e, vcv

    matrix B.bhat = mols(y, x, &e, &vcv)
    matrix B.sigma = (e'e) / (rows(y) - cols(x))
    matrix B.se = sqrt(diag(vcv) * B.sigma)
    B.e = e

    return B
end function


function bundle phillips (const matrix y,
                          const matrix x)
    /* Quintos-Phillips test. */

    scalar n = rows(y)

    bundle Model = run_ols(y, x)
    matrix e = Model.e
    matrix b = Model.bhat

    #  OLS regression on residuals
    matrix be = e[2:n] \ e[1:n-1]
    matrix ue = e[2:n] - e[1:n-1] * be

    # calculate bandwidth number
    scalar nu = rows(ue)
    matrix bu = ue[2:nu] \ ue[1:nu-1]
    matrix uu = ue[2:nu] - ue[1:nu-1] .* bu
    matrix su = meanc(uu.^2)
    scalar a2 = ( 4 * bu^2 * su / (1 - bu)^8 ) / (su / (1 - bu)^4)
    scalar bandwidth = 1.3221 * ((a2 * nu)^0.2)
    scalar m = bandwidth
    scalar j = 1
    scalar lemda = 0

    loop while j <= m -q
        matrix gama = ue[1:nu-j]'ue[j+1:nu] / nu
        scalar c = j / m
        scalar w = (75 / (6 * pi * c)^2 ) * \
                    ( sin(1.2 * pi * c) / (1.2 * pi * c) - cos(1.2 * pi * c) )
        scalar lemda = lemda + w * gama
        j++
    endloop

    # calculate Za and Zt for each t
    scalar p = sumc(e[1:n-1] .* e[2:n] - lemda) / sumc(e[1:n-1].^2)
    matrix tstat_za = n * (p - 1)
    matrix sigma2 = 2 * lemda + ue'ue / nu
    s = sigma2 / (e[1:n-1]'e[1:n-1])
    matrix tstat_zt = (p - 1) / sqrt(s)

    return _(tstat_za, tstat_zt)
end function


function bundle initialization (const matrix y, const matrix x)
    /* Initialize parameters.
    return: bundle */

    bundle self

    matrix self.y = y
    matrix self.x = x

    scalar self.T = rows(y)
    scalar self.nX = cols(x)
    scalar self.begin = round(0.15 * self.T)
    scalar self.final = round(0.85 * self.T)
    scalar self.t = self.begin
    matrix self.obs_ids = seq(self.begin, self.final)'

    matrix self.stats_adf = zeros((self.final - self.begin + 1), 1)
    matrix self.lags_adf = self.stats_adf
    matrix self.stats_za = self.stats_adf
    matrix self.stats_zt = self.stats_adf

    return self
end function


function matrix compile_regressors (const bundle self,
                                    const int t)
    /* Compile matrix of regressors
    return: type, description */

    matrix dummy = zeros(t, 1) | ones((self.T - t), 1)

    if self.model == 1
        matrix z = self.x
    else
        matrix z = ones(self.T, 1) ~ dummy
    endif

    if self.model == 2           # break in intercept
        z ~= self.x
    elif self.model == 3         # break in intercept and trend
        z ~= seq(1, self.T)' ~ self.x
    elif self.model == 4         # break in intercept and slope
        z ~= self.x ~ dummy .* self.x
    endif

    return z
end function


function bundle estimateGH (const matrix y,
                            const matrix x,
                            int model[2::],
                            int criteria[1::],
                            int adf_maxlag[1::])
    /* Estimate model and return results. */

    bundle Ret = null
    bundle self = initialization(y, x)
    self.model = model
    self.criteria = criteria
    self.adf_maxlag = adf_maxlag

    scalar t = self.t

    # Loop over different samples
    loop while t <= self.final -q

        matrix z = compile_regressors(self, t)
        scalar idx = t - self.begin + 1

        bundle Adf = adftest(z, self)

        self.stats_adf[idx] = Adf.tstat
        self.lags_adf[idx] = Adf.optimal_lag

        bundle p = phillips(y, z)
        self.stats_za[idx] = p.tstat_za
        self.stats_zt[idx] = p.tstat_zt

        t++
    endloop


    matrix critvalues_adf, critvalues_za, critvalues_zt

    if self.nX <= 4
        matrix Ret.critvalues_adf = critadfzt(self.nX, model)
        matrix Ret.critvalues_zt = Ret.critvalues_adf
        matrix Ret.critvalues_za = critza(self.nX, model)
    endif


    # Prepare results
    scalar Ret.tstat_adf = minc(self.stats_adf)
    scalar Ret.tstat_za = minc(self.stats_za)
    scalar Ret.tstat_zt = minc(self.stats_zt)

    scalar lag = iminc(self.stats_adf)
    scalar Ret.breakpoint_pct_adf = (lag + self.begin - 1) / self.T
    scalar Ret.breakpoint_obsnum_adf = self.obs_ids[iminc(self.stats_adf)]
    scalar Ret.lag_adf = self.lags_adf[lag]

    scalar Ret.breakpoint_pct_za = (iminc(self.stats_za) + self.begin - 1) / self.T
    scalar Ret.breakpoint_pct_zt = (iminc(self.stats_zt) + self.begin - 1) / self.T
    scalar Ret.breakpoint_obsnum_za = self.obs_ids[iminc(self.stats_za)]
    scalar Ret.breakpoint_obsnum_zt = self.obs_ids[iminc(self.stats_zt)]


    # Assemble final bundle
    Ret.nX = self.nX
    Ret.T = self.T
    Ret.obs_ids = self.obs_ids
    Ret.model = model
    Ret.criteria = criteria
    Ret.adf_maxlag = adf_maxlag

    Ret.tstatistics_adf = self.stats_adf
    Ret.tstatistics_zt = self.stats_zt
    Ret.tstatistics_za = self.stats_za

    Ret.breakpoint_obslabel_adf = obslabel(Ret.breakpoint_obsnum_adf)
    Ret.breakpoint_obslabel_zt = obslabel(Ret.breakpoint_obsnum_zt)
    Ret.breakpoint_obslabel_za = obslabel(Ret.breakpoint_obsnum_za)


    printGH(Ret)

    return Ret
end function


function string get_model_description (const int model[2:4:])

    if model == 2
        return "Break in intercept"
    elif model == 3
        return "Break in intercept and linear trend"
    elif model == 4
        return "Break in intercept and slope coefficients"
    endif
end function

function string get_criteria_description (const int criteria[1:4:])

    if criteria == 1
        return "Pre-specified AR lag"
    elif criteria == 2
        return "AIC-chosen AR lag"
    elif criteria == 3
        return "BIC-chosen AR lag"
    elif criteria == 4
        return "Downward-t-chosen AR lag"
    endif
end function


function void printGH (const bundle self)
    /* Print results
    return: nothing */

    printf "\n====================================================\n"
    printf "*** Gregory-Hansen cointegration test results ***\n\n"

    printf "Model type:       %s\n", get_model_description(self.model)
    printf "Maximum AR lag:   %d\n", self.adf_maxlag
    printf "Lag-selection:    %s\n\n", get_criteria_description(self.criteria)

    printf "******** ADF Test ***********\n"
    printf "optimal AR lag =    %d\n", self.lag_adf
    printf "t-statistic =       %.3f\n", self.tstat_adf
    printf "Break point at T =  '%s'\n", obslabel(self.breakpoint_obsnum_adf)

    if self.nX <= 4
        printf "\nCritical values: \n"
        printf "CV 0.01 =           %6.3f \n", self.critvalues_adf[1]
        printf "CV 0.025 =          %6.3f \n", self.critvalues_adf[2]
        printf "CV 0.05 =           %6.3f \n", self.critvalues_adf[3]
        printf "CV 0.10 =           %6.3f\n", self.critvalues_adf[4]
    endif


    printf "\n******** Phillips 'Zt' Test ********\n"
    printf "t-statistic =       %.3f\n", self.tstat_zt
    printf "Break point at T =  '%s'\n", obslabel(self.breakpoint_obsnum_zt)

    if self.nX <= 4
        printf "Critical values: \n"
        printf "CV 0.01 =           %6.3f \n", self.critvalues_adf[1]
        printf "CV 0.025 =          %6.3f \n", self.critvalues_adf[2]
        printf "CV 0.05 =           %6.3f \n", self.critvalues_adf[3]
        printf "CV 0.10 =           %6.3f\n", self.critvalues_adf[4]
    endif

    printf "\n******** Phillips 'Za' Test ********\n"
    printf "t-statistic =       %.3f\n", self.tstat_za
    printf "Break point at T =  '%s'\n", obslabel(self.breakpoint_obsnum_za)

    if self.nX <= 4
        printf "Critical values: \n"
        printf "CV 0.01 =           %6.3f \n", self.critvalues_za[1]
        printf "CV 0.025 =          %6.3f \n", self.critvalues_za[2]
        printf "CV 0.05 =           %6.3f \n", self.critvalues_za[3]
        printf "CV 0.10 =           %6.3f\n", self.critvalues_za[4]
    endif
    printf "\n"

    printf "\n====================================================\n"
end function


function void plotGH (const bundle self "Bundle returned by estimateGH",
                      string filename[null] "Full path for storing plot")
    /* Plot information on break points detected.
    return: nothing. */

    string filename = exists(filename) ? filename : "display"

    matrix mplot = self.tstatistics_adf ~ self.tstatistics_za ~ \
        self.tstatistics_zt ~ self.obs_ids
    cnameset(mplot, defarray("ADF*", "Za", "Zt", "Sample"))

    plot mplot
        options with-lp
        literal set title "Regime shifts using ADF*, Za or Zt tests"
        literal set key outside below
    end plot --output="@filename"
end function
